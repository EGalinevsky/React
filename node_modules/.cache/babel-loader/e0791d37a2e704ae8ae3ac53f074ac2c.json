{"ast":null,"code":"import { usersAPI, profileAPI } from \"./../api/api\";\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst DELETE_POST = 'DELETE_POST';\nlet initialState = {\n  postData: [{\n    message: \"hi\",\n    id: 1,\n    likes: \"15\"\n  }, {\n    message: \"how is your name\",\n    id: 2,\n    likes: \"15\"\n  }, {\n    message: \"what are you doing\",\n    id: 3,\n    likes: \"15\"\n  }],\n  profile: null,\n  status: \"\"\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      let newPost = {\n        id: 5,\n        message: action.nextPostBody,\n        likes: 0\n      };\n      return { ...state,\n        postData: [...state.postData, newPost],\n        nextPostBody: ''\n      };\n\n    case SET_USER_PROFILE:\n      return { ...state,\n        profile: action.profile\n      };\n\n    case SET_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        postData: state.postData.filter(p => p.id != action.postId)\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const addPostActionCreator = nextPostBody => {\n  return {\n    type: ADD_POST,\n    nextPostBody\n  };\n};\nexport const setStatus = status => {\n  return {\n    type: SET_STATUS,\n    status\n  };\n};\nexport const deletePost = postId => {\n  return {\n    type: DELETE_POST,\n    postId\n  };\n};\nexport const setUserProfile = profile => {\n  return {\n    type: SET_USER_PROFILE,\n    profile\n  };\n};\nexport const getProfileUser = userId => async dispatch => {\n  let response = await usersAPI.getProfile(userId);\n  dispatch(setUserProfile(response.data));\n};\nexport const getStatus = userId => async dispatch => {\n  let response = await profileAPI.getStatus(userId);\n  dispatch(setStatus(response.data));\n};\nexport const updateStatus = status => {\n  return dispatch => {\n    profileAPI.updateStatus(status).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setStatus(status));\n      }\n    });\n  };\n};\nexport default profileReducer;","map":{"version":3,"sources":["D:/IT/react/first-project/my-react/src/redux/profileReducer.js"],"names":["usersAPI","profileAPI","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","initialState","postData","message","id","likes","profile","status","profileReducer","state","action","type","newPost","nextPostBody","filter","p","postId","addPostActionCreator","setStatus","deletePost","setUserProfile","getProfileUser","userId","dispatch","response","getProfile","data","getStatus","updateStatus","then","resultCode"],"mappings":"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","sourcesContent":["import { usersAPI, profileAPI } from \"./../api/api\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\n\r\nlet initialState = {\r\n  postData: [\r\n    { message: \"hi\", id: 1, likes: \"15\" },\r\n    { message: \"how is your name\", id: 2, likes: \"15\" },\r\n    { message: \"what are you doing\", id: 3, likes: \"15\" },\r\n  ],\r\n  profile: null,\r\n  status: \"\"\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.nextPostBody,\r\n        likes: 0\r\n      };\r\n      return {\r\n        ...state,\r\n        postData: [...state.postData, newPost],\r\n        nextPostBody: ''\r\n      }\r\n    case SET_USER_PROFILE:\r\n      return {\r\n        ...state, profile: action.profile\r\n      }\r\n    case SET_STATUS:\r\n      return {\r\n        ...state, status: action.status\r\n      }\r\n    case DELETE_POST:\r\n      return {\r\n        ...state, postData: state.postData.filter(p => p.id != action.postId\r\n        )\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  };\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (nextPostBody) => {\r\n  return {\r\n    type: ADD_POST,\r\n    nextPostBody\r\n  }\r\n}\r\nexport const setStatus = (status) => {\r\n  return {\r\n    type: SET_STATUS,\r\n    status\r\n  }\r\n}\r\nexport const deletePost = (postId) => {\r\n  return {\r\n    type: DELETE_POST,\r\n    postId\r\n  }\r\n}\r\nexport const setUserProfile = (profile) => {\r\n  return {\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n  }\r\n}\r\nexport const getProfileUser = (userId) => async (dispatch) => {\r\n    let response = await usersAPI.getProfile(userId)\r\n    dispatch(setUserProfile(response.data));\r\n  }\r\n\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n  let response = await profileAPI.getStatus(userId)\r\n      dispatch(setStatus(response.data));\r\n}\r\nexport const updateStatus = (status) => {\r\n  return (dispatch) => {\r\n    profileAPI.updateStatus(status).then(response => {\r\n\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}