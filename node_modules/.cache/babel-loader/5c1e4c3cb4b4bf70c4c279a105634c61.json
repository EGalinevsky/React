{"ast":null,"code":"import { authAPI } from \"./../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false // isFetching: true\n\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      debugger;\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => {\n  debugger;\n  return {\n    type: SET_USER_DATA,\n    payload: {\n      id,\n      email,\n      login,\n      isAuth\n    }\n  };\n};\nexport const getAuthUserData = () => dispatch => {\n  authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["D:/IT/react/first-project/my-react/src/redux/auth-reducer.js"],"names":["authAPI","SET_USER_DATA","initialState","id","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","me","then","response","data","resultCode","password","rememberMe","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO,CAKf;;AALe,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAElD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI;AACA,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AARR;;AASC;AACJ,CAZD;;AAeA,OAAO,MAAMI,eAAe,GAAG,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,KAA8B;AACzD;AACA,SAAO;AACHI,IAAAA,IAAI,EAAET,aADH;AAEHU,IAAAA,OAAO,EAAE;AAAER,MAAAA,EAAF;AAAMC,MAAAA,KAAN;AAAaC,MAAAA,KAAb;AAAoBC,MAAAA;AAApB;AAFN,GAAP;AAIH,CANM;AAQP,OAAO,MAAMO,eAAe,GAAG,MAAOC,QAAD,IAAc;AAC/Cd,EAAAA,OAAO,CAACe,EAAR,GAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAC1B,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAEhC,UAAI;AAAEhB,QAAAA,EAAF;AAAMC,QAAAA,KAAN;AAAaC,QAAAA;AAAb,UAAuBY,QAAQ,CAACC,IAAT,CAAcA,IAAzC;AACAJ,MAAAA,QAAQ,CAACF,eAAe,CAACT,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACH;AACJ,GAND;AAOH,CARM;AASP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAkCP,QAAD,IAAc;AAChEd,EAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EAA2CL,IAA3C,CAAgDC,QAAQ,IAAI;AACxD,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH;AACJ,GAJD;AAKH,CANM;AAOP,OAAO,MAAMS,MAAM,GAAG,MAAOR,QAAD,IAAc;AACtCd,EAAAA,OAAO,CAACsB,MAAR,GAAiBN,IAAjB,CAAsBC,QAAQ,IAAI;AAC9B,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCL,MAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,GAJD;AAKH,CANM;AAOP,eAAeL,WAAf","sourcesContent":["import { authAPI } from \"./../api/api\";\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n    // isFetching: true\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            debugger;\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n}\r\n\r\n\r\nexport const setAuthUserData = (id, email, login, isAuth) => {\r\n    debugger;\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: { id, email, login, isAuth }\r\n    }\r\n}\r\n\r\nexport const getAuthUserData = () => (dispatch) => {\r\n    authAPI.me().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n\r\n            let { id, email, login } = response.data.data;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n        }\r\n    });\r\n}\r\nexport const login = (email, password, rememberMe) => (dispatch) => {\r\n    authAPI.login(email, password, rememberMe).then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        }\r\n    });\r\n}\r\nexport const logout = () => (dispatch) => {\r\n    authAPI.logout().then(response => {\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    });\r\n}\r\nexport default authReducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}