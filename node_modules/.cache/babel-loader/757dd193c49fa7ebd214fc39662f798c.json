{"ast":null,"code":"import { usersAPI } from './../api/api';\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SETUSERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: [2, 3]\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const followSuccess = userId => {\n  return {\n    type: FOLLOW,\n    userId\n  };\n};\nexport const unfollowSuccess = userId => {\n  return {\n    type: UNFOLLOW,\n    userId\n  };\n};\nexport const setUsers = users => {\n  return {\n    type: SET_USERS,\n    users\n  };\n};\nexport const setCurrentPage = currentPage => {\n  return {\n    type: SET_CURRENT_PAGE,\n    currentPage\n  };\n};\nexport const setUsersTotalCount = totalUsersCount => {\n  return {\n    type: SET_TOTAL_USERS_COUNT,\n    count: totalUsersCount\n  };\n};\nexport const toggleIsFetching = isFetching => {\n  return {\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n  };\n};\nexport const toggleFollowingProgress = (isFetching, userId) => {\n  return {\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n  };\n};\nexport const getUsers = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatch(toggleIsFetching(true));\n    usersAPI.getUsers(currentPage, pageSize).then(data => {\n      dispatch(toggleIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setUsersTotalCount(data.totalCount));\n    });\n  };\n};\nexport const follow = (currentPage, pageSize) => {\n  return dispatch => {\n    dispatc.toggleFollowingProgress(true, u.id);\n    usersAPI.followUsers(u.id).then(response => {\n      if (response.data.resultCode === 0) {\n        props.follow(u.id);\n      }\n\n      props.toggleFollowingProgress(false, u.id);\n    });\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["D:/IT/react/first-project/my-react/src/redux/usersRedecer.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setUsersTotalCount","toggleIsFetching","toggleFollowingProgress","getUsers","dispatch","then","data","items","totalCount","follow","dispatc","followUsers","response","resultCode","props"],"mappings":"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","sourcesContent":["import { usersAPI } from './../api/api';\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SETUSERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [2, 3]\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case FOLLOW:\r\n\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    };\r\n}\r\n\r\n\r\nexport const followSuccess = (userId) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    }\r\n}\r\nexport const unfollowSuccess = (userId) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    }\r\n}\r\nexport const setUsers = (users) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    }\r\n}\r\nexport const setCurrentPage = (currentPage) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    }\r\n}\r\nexport const setUsersTotalCount = (totalUsersCount) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        count: totalUsersCount\r\n    }\r\n}\r\nexport const toggleIsFetching = (isFetching) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    }\r\n}\r\nexport const toggleFollowingProgress = (isFetching, userId) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    }\r\n}\r\n\r\nexport const getUsers = (currentPage, pageSize,) => {\r\n    return (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(setUsers(data.items));\r\n            dispatch(setUsersTotalCount(data.totalCount));\r\n        });\r\n    }\r\n}\r\nexport const follow = (currentPage, pageSize,) => {\r\n    return (dispatch) => {\r\n        dispatc.toggleFollowingProgress(true, u.id);\r\n\r\n        usersAPI.followUsers(u.id).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                props.follow(u.id);\r\n            }\r\n            props.toggleFollowingProgress(false, u.id);\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default usersReducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}