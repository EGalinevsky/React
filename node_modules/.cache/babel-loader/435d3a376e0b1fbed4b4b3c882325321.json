{"ast":null,"code":"import { usersAPI, profileAPI } from \"./../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nconst DELETE_POST = 'DELETE_POST';\nconst SAVE_PHOTO_SUCCESS = 'SAVE_PHOTO_SUCCESS';\nlet initialState = {\n  postData: [{\n    message: \"hi\",\n    id: 1,\n    likes: \"15\"\n  }, {\n    message: \"how is your name\",\n    id: 2,\n    likes: \"15\"\n  }, {\n    message: \"what are you doing\",\n    id: 3,\n    likes: \"15\"\n  }],\n  profile: null,\n  status: \"\"\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      let newPost = {\n        id: 5,\n        message: action.nextPostBody,\n        likes: 0\n      };\n      return { ...state,\n        postData: [...state.postData, newPost],\n        nextPostBody: ''\n      };\n\n    case SET_USER_PROFILE:\n      return { ...state,\n        profile: action.profile\n      };\n\n    case SET_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        postData: state.postData.filter(p => p.id != action.postId)\n      };\n\n    case SAVE_PHOTO_SUCCESS:\n      return { ...state,\n        profile: { ...state.profile,\n          photos: action.photos\n        }\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const addPostActionCreator = nextPostBody => {\n  return {\n    type: ADD_POST,\n    nextPostBody\n  };\n};\nexport const setStatus = status => {\n  return {\n    type: SET_STATUS,\n    status\n  };\n};\nexport const deletePost = postId => {\n  return {\n    type: DELETE_POST,\n    postId\n  };\n};\nexport const savePhotoSucces = photos => {\n  return {\n    type: SAVE_PHOTO_SUCCESS,\n    photos\n  };\n};\nexport const setUserProfile = profile => {\n  return {\n    type: SET_USER_PROFILE,\n    profile\n  };\n};\nexport const getProfileUser = userId => {\n  return dispatch => {\n    usersAPI.getProfile(userId).then(response => {\n      dispatch(setUserProfile(response.data));\n    });\n  };\n};\nexport const getStatus = userId => dispatch => {\n  profileAPI.getStatus(userId).then(response => {\n    dispatch(setStatus(response.data));\n  });\n};\nexport const updateStatus = status => {\n  return dispatch => {\n    profileAPI.updateStatus(status).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setStatus(status));\n      }\n    });\n  };\n};\nexport const savePhoto = file => {\n  return dispatch => {\n    profileAPI.savePhoto(file).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(savePhotoSucces(response.data.data.photos));\n      }\n    });\n  };\n}; // export const saveProfile = (profile) =>{\n//   return (dispatch) => {\n//     profileAPI.saveProfile(profile).then(response => {\n//     debugger      \n//           if (response.data.resultCode === 0){\n//           dispatch(savePhotoSucces(response.data.data.photos));\n//         }\n//         }); \n//   }\n// }\n\nexport const saveProfile = profile => async (dispatch, getState) => {\n  const userId = getState().auth.id;\n  const response = await profileAPI.saveProfile(profile);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getProfileUser(userId));\n  } else {\n    dispatch(stopSubmit(\"edit-profile\", {\n      _error: response.data.messages[0]\n    }));\n    return Promise.reject();\n  }\n};\nexport default profileReducer;","map":{"version":3,"sources":["D:/IT/react/first-project/my-react/src/redux/profileReducer.js"],"names":["usersAPI","profileAPI","stopSubmit","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","initialState","postData","message","id","likes","profile","status","profileReducer","state","action","type","newPost","nextPostBody","filter","p","postId","photos","addPostActionCreator","setStatus","deletePost","savePhotoSucces","setUserProfile","getProfileUser","userId","dispatch","getProfile","then","response","data","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","_error","messages","Promise","reject"],"mappings":"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","sourcesContent":["import {usersAPI, profileAPI} from \"./../api/api\";\r\nimport { stopSubmit } from \"redux-form\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST';\r\nconst SAVE_PHOTO_SUCCESS ='SAVE_PHOTO_SUCCESS'\r\n\r\nlet initialState = {\r\n  postData: [\r\n    { message: \"hi\", id: 1, likes: \"15\" },\r\n    { message: \"how is your name\", id: 2, likes: \"15\" },\r\n    { message: \"what are you doing\", id: 3, likes: \"15\" },\r\n  ],\r\n  profile: null,\r\n  status: \"\",\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case ADD_POST:\r\n      let newPost = {\r\n        id: 5,\r\n        message: action.nextPostBody,\r\n        likes: 0\r\n      };\r\n      return {\r\n        ...state,\r\n        postData: [...state.postData, newPost],\r\n        nextPostBody: ''\r\n      }\r\n    case SET_USER_PROFILE:\r\n      return{\r\n        ...state, profile: action.profile\r\n      }\r\n    case SET_STATUS:\r\n      return{\r\n        ...state, status: action.status\r\n      }\r\n    case DELETE_POST:\r\n      return{\r\n        ...state, postData: state.postData.filter(p => p.id != action.postId\r\n          )\r\n      }\r\n    case SAVE_PHOTO_SUCCESS:\r\n      return{\r\n        ...state, profile:{...state.profile, photos: action.photos} \r\n      }\r\n\r\n    default:\r\n      return state;\r\n  };\r\n}\r\n\r\n\r\nexport const addPostActionCreator = (nextPostBody) => {\r\n  return {\r\n    type: ADD_POST,\r\n    nextPostBody\r\n  }\r\n}\r\nexport const setStatus = (status) => {\r\n  return {\r\n    type: SET_STATUS,\r\n    status\r\n  }\r\n}\r\nexport const deletePost = (postId) => {\r\n  return {\r\n    type: DELETE_POST,\r\n    postId\r\n  }\r\n}\r\nexport const savePhotoSucces = (photos) => {\r\n  return {\r\n    type: SAVE_PHOTO_SUCCESS,\r\n    photos\r\n  }\r\n}\r\nexport const setUserProfile = (profile) => {\r\n  return {\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n  }\r\n}\r\nexport const getProfileUser = (userId) =>{\r\n  return (dispatch) => {\r\n      usersAPI.getProfile(userId).then(response => {\r\n          dispatch(setUserProfile(response.data));\r\n        }); \r\n  }\r\n}\r\nexport const getStatus = (userId) => (dispatch) => {\r\n    profileAPI.getStatus(userId)\r\n    .then(response => {      \r\n          dispatch(setStatus(response.data));\r\n        });         \r\n}\r\nexport const updateStatus = (status) =>{\r\n  return (dispatch) => {\r\n    profileAPI.updateStatus(status).then(response => {\r\n          \r\n          if (response.data.resultCode === 0){\r\n          dispatch(setStatus(status));\r\n        }\r\n        }); \r\n  }\r\n}\r\nexport const savePhoto = (file) =>{\r\n  return (dispatch) => {\r\n    profileAPI.savePhoto(file).then(response => {\r\n          \r\n          if (response.data.resultCode === 0){\r\n          dispatch(savePhotoSucces(response.data.data.photos));\r\n        }\r\n        }); \r\n  }\r\n}\r\n// export const saveProfile = (profile) =>{\r\n//   return (dispatch) => {\r\n//     profileAPI.saveProfile(profile).then(response => {\r\n//     debugger      \r\n//           if (response.data.resultCode === 0){\r\n//           dispatch(savePhotoSucces(response.data.data.photos));\r\n//         }\r\n//         }); \r\n//   }\r\n// }\r\nexport const saveProfile = (profile) =>async (dispatch, getState) => {\r\n    const userId = getState().auth.id\r\n    const response = await profileAPI.saveProfile(profile);\r\n          if (response.data.resultCode === 0){\r\n          dispatch(getProfileUser(userId));\r\n        } else {\r\n          dispatch(stopSubmit(\"edit-profile\", { _error: response.data.messages[0]}));\r\n          return Promise.reject()\r\n        }\r\n      }; \r\n  \r\n\r\n\r\n\r\n\r\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}