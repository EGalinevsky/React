{"ast":null,"code":"import { authAPI } from \"./../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null // isFetching: true\n\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const setAuthUserData = (id, email, login) => {\n  return {\n    type: SET_USER_DATA,\n    data: {\n      id,\n      email,\n      login\n    }\n  };\n};\nexport const getAuthUserData = () => dispatch => {\n  authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        login,\n        email\n      } = response.data.data;\n      dispatch(setAuthUserData(id, login, email));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["D:/IT/react/first-project/my-react/src/redux/auth-reducer.js"],"names":["authAPI","SET_USER_DATA","initialState","id","email","login","authReducer","state","action","type","data","setAuthUserData","getAuthUserData","dispatch","me","then","response","resultCode"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,cAAtB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ,CAKf;;AALe,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAElD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,aAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;;AAQC;AACF,CAXH;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACR,EAAD,EAAKC,KAAL,EAAYC,KAAZ,KAAsB;AACjD,SAAO;AACHI,IAAAA,IAAI,EAAER,aADH;AAEHS,IAAAA,IAAI,EAAC;AAACP,MAAAA,EAAD;AAAKC,MAAAA,KAAL;AAAYC,MAAAA;AAAZ;AAFF,GAAP;AAIH,CALM;AAOP,OAAO,MAAMO,eAAe,GAAG,MAAOC,QAAD,IAAa;AAC9Cb,EAAAA,OAAO,CAACc,EAAR,GAAaC,IAAb,CAAkBC,QAAQ,IAAI;AAC1B,QAAIA,QAAQ,CAACN,IAAT,CAAcO,UAAd,KAA6B,CAAjC,EAAmC;AAEjC,UAAI;AAACd,QAAAA,EAAD;AAAKE,QAAAA,KAAL;AAAYD,QAAAA;AAAZ,UAAqBY,QAAQ,CAACN,IAAT,CAAcA,IAAvC;AACAG,MAAAA,QAAQ,CAACF,eAAe,CAACR,EAAD,EAAKE,KAAL,EAAYD,KAAZ,CAAhB,CAAR;AACD;AACF,GANH;AAOH,CARM;AASP,eAAeE,WAAf","sourcesContent":["import {authAPI} from \"./../api/api\";\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\n \r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    \r\n    // isFetching: true\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    \r\n    switch (action.type) {          \r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state;\r\n    };\r\n  }\r\n\r\n\r\nexport const setAuthUserData = (id, email, login) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data:{id, email, login}        \r\n    }\r\n}\r\n\r\nexport const getAuthUserData = () => (dispatch) =>{\r\n    authAPI.me().then(response => {\r\n        if (response.data.resultCode === 0){\r\n  \r\n          let {id, login, email} = response.data.data;\r\n          dispatch(setAuthUserData(id, login, email));\r\n        }\r\n      });\r\n}\r\nexport default authReducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}