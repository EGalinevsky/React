{"ast":null,"code":"import { usersAPI } from './../api/api';\nimport { updateObjectInArray } from \"./../utils/objects-helpers\";\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SETUSERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 5,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isFetching: true,\n  followingInProgress: []\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: true\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id != action.userId)\n        };\n      }\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport const followSuccess = userId => {\n  return {\n    type: FOLLOW,\n    userId\n  };\n};\nexport const unfollowSuccess = userId => {\n  return {\n    type: UNFOLLOW,\n    userId\n  };\n};\nexport const setUsers = users => {\n  return {\n    type: SET_USERS,\n    users\n  };\n};\nexport const setCurrentPage = currentPage => {\n  return {\n    type: SET_CURRENT_PAGE,\n    currentPage\n  };\n};\nexport const setUsersTotalCount = totalUsersCount => {\n  return {\n    type: SET_TOTAL_USERS_COUNT,\n    count: totalUsersCount\n  };\n};\nexport const toggleIsFetching = isFetching => {\n  return {\n    type: TOGGLE_IS_FETCHING,\n    isFetching\n  };\n};\nexport const toggleFollowingProgress = (isFetching, userId) => {\n  return {\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\n    isFetching,\n    userId\n  };\n};\n\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgress(true, userId));\n  let response = await apiMethod(userId);\n\n  if (response.data.resultCode === 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(toggleFollowingProgress(false, userId));\n};\n\nexport const requestUsers = (currentPage, pageSize) => {\n  return async dispatch => {\n    dispatch(toggleIsFetching(true));\n    let data = await usersAPI.getUsers(currentPage, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setUsersTotalCount(data.totalCount));\n  };\n};\nexport const follow = userId => {\n  return async dispatch => {\n    let apiMethod = usersAPI.followUsers.bind(userId);\n    let actionCreator = followSuccess;\n    followUnfollowFlow(dispatch, userId, apiMethod, actionCreator);\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    let apiMethod = usersAPI.unfollowUsers.bind(userId);\n    let actionCreator = unfollowSuccess;\n    followUnfollowFlow(dispatch, userId, apiMethod, actionCreator);\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["D:/IT/react/first-project/my-react/src/redux/usersRedecer.js"],"names":["usersAPI","updateObjectInArray","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","userId","followed","map","u","id","count","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setUsersTotalCount","toggleIsFetching","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","response","data","resultCode","requestUsers","getUsers","items","totalCount","follow","followUsers","bind","unfollow","unfollowUsers"],"mappings":"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","sourcesContent":["import { usersAPI } from './../api/api';\r\nimport {updateObjectInArray} from \"./../utils/objects-helpers\";\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SETUSERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case FOLLOW:\r\n\r\n            return {\r\n                ...state,\r\n                users:updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n\r\n        case UNFOLLOW:\r\n\r\n            return {\r\n                ...state,\r\n                users: state.users.map((u) => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case SET_USERS: {\r\n            return { ...state, users: action.users }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return { ...state, currentPage: action.currentPage }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return { ...state, totalUsersCount: action.count }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return { ...state, isFetching: action.isFetching }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    };\r\n}\r\n\r\n\r\nexport const followSuccess = (userId) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    }\r\n}\r\nexport const unfollowSuccess = (userId) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    }\r\n}\r\nexport const setUsers = (users) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    }\r\n}\r\nexport const setCurrentPage = (currentPage) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    }\r\n}\r\nexport const setUsersTotalCount = (totalUsersCount) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        count: totalUsersCount\r\n    }\r\n}\r\nexport const toggleIsFetching = (isFetching) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    }\r\n}\r\nexport const toggleFollowingProgress = (isFetching, userId) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch, userId, apiMethod,actionCreator) => {\r\n\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const requestUsers = (currentPage, pageSize,) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setUsersTotalCount(data.totalCount));\r\n    }\r\n}\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.followUsers.bind(userId)\r\n        let actionCreator = followSuccess;\r\n        followUnfollowFlow(dispatch, userId, apiMethod,actionCreator)\r\n    }\r\n}\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        let apiMethod = usersAPI.unfollowUsers.bind(userId);\r\n        let actionCreator = unfollowSuccess;\r\n        followUnfollowFlow(dispatch, userId, apiMethod,actionCreator)\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\n"]},"metadata":{},"sourceType":"module"}